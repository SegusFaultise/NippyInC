main() HIT!

TOKEN_SYMBOL: /
TOKEN_SYMBOL: /
TOKEN_ALPHA: Copyright
TOKEN_DIGIT: 2
TOKEN_DIGIT: 0
TOKEN_DIGIT: 1
TOKEN_DIGIT: 2
TOKEN_ALPHA: Rui
TOKEN_ALPHA: Ueyama
TOKEN_SYMBOL: .
TOKEN_ALPHA: Released
TOKEN_ALPHA: under
TOKEN_ALPHA: the
TOKEN_ALPHA: MIT
TOKEN_ALPHA: license
TOKEN_SYMBOL: .
TOKEN_SYMBOL: #
TOKEN_ALPHA: include
TOKEN_SYMBOL: <
TOKEN_ALPHA: stdarg
TOKEN_SYMBOL: .
TOKEN_ALPHA: h
TOKEN_SYMBOL: >
TOKEN_SYMBOL: #
TOKEN_ALPHA: include
TOKEN_SYMBOL: <
TOKEN_ALPHA: stdlib
TOKEN_SYMBOL: .
TOKEN_ALPHA: h
TOKEN_SYMBOL: >
TOKEN_SYMBOL: #
TOKEN_ALPHA: include
TOKEN_SYMBOL: <
TOKEN_ALPHA: string
TOKEN_SYMBOL: .
TOKEN_ALPHA: h
TOKEN_SYMBOL: >
TOKEN_SYMBOL: #
TOKEN_ALPHA: include
TOKEN_SYMBOL: <
TOKEN_ALPHA: sys
TOKEN_SYMBOL: /
TOKEN_ALPHA: stat
TOKEN_SYMBOL: .
TOKEN_ALPHA: h
TOKEN_SYMBOL: >
TOKEN_SYMBOL: #
TOKEN_ALPHA: include
TOKEN_SYMBOL: <
TOKEN_ALPHA: sys
TOKEN_SYMBOL: /
TOKEN_ALPHA: types
TOKEN_SYMBOL: .
TOKEN_ALPHA: h
TOKEN_SYMBOL: >
TOKEN_SYMBOL: #
TOKEN_ALPHA: include
TOKEN_SYMBOL: <
TOKEN_ALPHA: unistd
TOKEN_SYMBOL: .
TOKEN_ALPHA: h
TOKEN_SYMBOL: >
TOKEN_SYMBOL: #
TOKEN_ALPHA: include
TOKEN_SYMBOL: "
TOKEN_DIGIT: 8
TOKEN_ALPHA: cc
TOKEN_SYMBOL: .
TOKEN_ALPHA: h
TOKEN_SYMBOL: "
TOKEN_ALPHA: bool
TOKEN_ALPHA: dumpstack
TOKEN_SYMBOL: =
TOKEN_ALPHA: false
TOKEN_SYMBOL: ;
TOKEN_ALPHA: bool
TOKEN_ALPHA: dumpsource
TOKEN_SYMBOL: =
TOKEN_ALPHA: true
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: REGS
TOKEN_SYMBOL: [
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: {
TOKEN_SYMBOL: "
TOKEN_ALPHA: rdi
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: rsi
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: rdx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_DIGIT: 8
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_DIGIT: 9
TOKEN_SYMBOL: "
TOKEN_SYMBOL: }
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: SREGS
TOKEN_SYMBOL: [
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: {
TOKEN_SYMBOL: "
TOKEN_ALPHA: dil
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: sil
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: dl
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: cl
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_DIGIT: 8
TOKEN_ALPHA: b
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_DIGIT: 9
TOKEN_ALPHA: b
TOKEN_SYMBOL: "
TOKEN_SYMBOL: }
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: MREGS
TOKEN_SYMBOL: [
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: {
TOKEN_SYMBOL: "
TOKEN_ALPHA: edi
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: esi
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: edx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: ecx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_DIGIT: 8
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_DIGIT: 9
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: }
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: int
TOKEN_ALPHA: TAB
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: functions
TOKEN_SYMBOL: =
TOKEN_SYMBOL: &
TOKEN_ALPHA: EMPTY
TOKEN_SYMBOL: _
TOKEN_ALPHA: VECTOR
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: int
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: int
TOKEN_ALPHA: numgp
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: int
TOKEN_ALPHA: numfp
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: FILE
TOKEN_SYMBOL: *
TOKEN_ALPHA: outputfp
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: Map
TOKEN_SYMBOL: *
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: files
TOKEN_SYMBOL: =
TOKEN_SYMBOL: &
TOKEN_ALPHA: EMPTY
TOKEN_SYMBOL: _
TOKEN_ALPHA: MAP
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: Map
TOKEN_SYMBOL: *
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: lines
TOKEN_SYMBOL: =
TOKEN_SYMBOL: &
TOKEN_ALPHA: EMPTY
TOKEN_SYMBOL: _
TOKEN_ALPHA: MAP
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: last
TOKEN_SYMBOL: _
TOKEN_ALPHA: loc
TOKEN_SYMBOL: =
TOKEN_SYMBOL: "
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: decl
TOKEN_SYMBOL: _
TOKEN_ALPHA: init
TOKEN_SYMBOL: (
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: inits
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: totalsize
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: do
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: (
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: inits
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: size
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: v
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: #
TOKEN_ALPHA: define
TOKEN_ALPHA: REGAREA
TOKEN_SYMBOL: _
TOKEN_ALPHA: SIZE
TOKEN_DIGIT: 1
TOKEN_DIGIT: 7
TOKEN_DIGIT: 6
TOKEN_SYMBOL: #
TOKEN_ALPHA: define
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: .
TOKEN_SYMBOL: .
TOKEN_SYMBOL: .
TOKEN_SYMBOL: )
TOKEN_ALPHA: emitf
TOKEN_SYMBOL: (
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_ALPHA: LINE
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_SYMBOL: \
TOKEN_ALPHA: t
TOKEN_SYMBOL: "
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_ALPHA: VA
TOKEN_SYMBOL: _
TOKEN_ALPHA: ARGS
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_SYMBOL: )
TOKEN_SYMBOL: #
TOKEN_ALPHA: define
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: noindent
TOKEN_SYMBOL: (
TOKEN_SYMBOL: .
TOKEN_SYMBOL: .
TOKEN_SYMBOL: .
TOKEN_SYMBOL: )
TOKEN_ALPHA: emitf
TOKEN_SYMBOL: (
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_ALPHA: LINE
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_ALPHA: VA
TOKEN_SYMBOL: _
TOKEN_ALPHA: ARGS
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_SYMBOL: )
TOKEN_SYMBOL: #
TOKEN_ALPHA: ifdef
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_ALPHA: GNUC
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_SYMBOL: #
TOKEN_ALPHA: define
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: \
TOKEN_ALPHA: int
TOKEN_ALPHA: save
TOKEN_SYMBOL: _
TOKEN_ALPHA: hook
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_ALPHA: attribute
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_ALPHA: unused
TOKEN_SYMBOL: ,
TOKEN_ALPHA: cleanup
TOKEN_SYMBOL: (
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: function
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: \
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: dumpstack
TOKEN_SYMBOL: )
TOKEN_SYMBOL: \
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_ALPHA: functions
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_ALPHA: void
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_ALPHA: func
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: function
TOKEN_SYMBOL: (
TOKEN_ALPHA: void
TOKEN_SYMBOL: *
TOKEN_ALPHA: ignore
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: dumpstack
TOKEN_SYMBOL: )
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_ALPHA: functions
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: #
TOKEN_ALPHA: else
TOKEN_SYMBOL: #
TOKEN_ALPHA: define
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: #
TOKEN_ALPHA: endif
TOKEN_ALPHA: static
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: get
TOKEN_SYMBOL: _
TOKEN_ALPHA: caller
TOKEN_SYMBOL: _
TOKEN_ALPHA: list
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: Buffer
TOKEN_SYMBOL: *
TOKEN_ALPHA: b
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: buffer
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: functions
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: i
TOKEN_SYMBOL: >
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_ALPHA: buf
TOKEN_SYMBOL: _
TOKEN_ALPHA: printf
TOKEN_SYMBOL: (
TOKEN_ALPHA: b
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: buf
TOKEN_SYMBOL: _
TOKEN_ALPHA: printf
TOKEN_SYMBOL: (
TOKEN_ALPHA: b
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: functions
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: buf
TOKEN_SYMBOL: _
TOKEN_ALPHA: write
TOKEN_SYMBOL: (
TOKEN_ALPHA: b
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_DIGIT: 0
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_ALPHA: buf
TOKEN_SYMBOL: _
TOKEN_ALPHA: body
TOKEN_SYMBOL: (
TOKEN_ALPHA: b
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: void
TOKEN_ALPHA: set
TOKEN_SYMBOL: _
TOKEN_ALPHA: output
TOKEN_SYMBOL: _
TOKEN_ALPHA: file
TOKEN_SYMBOL: (
TOKEN_ALPHA: FILE
TOKEN_SYMBOL: *
TOKEN_ALPHA: fp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: outputfp
TOKEN_SYMBOL: =
TOKEN_ALPHA: fp
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: void
TOKEN_ALPHA: close
TOKEN_SYMBOL: _
TOKEN_ALPHA: output
TOKEN_SYMBOL: _
TOKEN_ALPHA: file
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: fclose
TOKEN_SYMBOL: (
TOKEN_ALPHA: outputfp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emitf
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: line
TOKEN_SYMBOL: ,
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: fmt
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: .
TOKEN_SYMBOL: .
TOKEN_SYMBOL: .
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_SYMBOL: /
TOKEN_SYMBOL: /
TOKEN_ALPHA: Replace
TOKEN_SYMBOL: "
TOKEN_SYMBOL: #
TOKEN_SYMBOL: "
TOKEN_ALPHA: with
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_SYMBOL: %
TOKEN_SYMBOL: "
TOKEN_ALPHA: so
TOKEN_ALPHA: that
TOKEN_ALPHA: vfprintf
TOKEN_ALPHA: prints
TOKEN_ALPHA: out
TOKEN_SYMBOL: "
TOKEN_SYMBOL: #
TOKEN_SYMBOL: "
TOKEN_ALPHA: as
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: char
TOKEN_ALPHA: buf
TOKEN_SYMBOL: [
TOKEN_DIGIT: 2
TOKEN_DIGIT: 5
TOKEN_DIGIT: 6
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: =
TOKEN_ALPHA: fmt
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: ;
TOKEN_ALPHA: p
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: sizeof
TOKEN_SYMBOL: (
TOKEN_ALPHA: buf
TOKEN_SYMBOL: )
TOKEN_SYMBOL: -
TOKEN_DIGIT: 3
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: #
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: buf
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: %
TOKEN_SYMBOL: '
TOKEN_SYMBOL: ;
TOKEN_ALPHA: buf
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: %
TOKEN_SYMBOL: '
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: buf
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: buf
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_DIGIT: 0
TOKEN_SYMBOL: '
TOKEN_SYMBOL: ;
TOKEN_ALPHA: va
TOKEN_SYMBOL: _
TOKEN_ALPHA: list
TOKEN_ALPHA: args
TOKEN_SYMBOL: ;
TOKEN_ALPHA: va
TOKEN_SYMBOL: _
TOKEN_ALPHA: start
TOKEN_SYMBOL: (
TOKEN_ALPHA: args
TOKEN_SYMBOL: ,
TOKEN_ALPHA: fmt
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: col
TOKEN_SYMBOL: =
TOKEN_ALPHA: vfprintf
TOKEN_SYMBOL: (
TOKEN_ALPHA: outputfp
TOKEN_SYMBOL: ,
TOKEN_ALPHA: buf
TOKEN_SYMBOL: ,
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: va
TOKEN_SYMBOL: _
TOKEN_ALPHA: end
TOKEN_SYMBOL: (
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: dumpstack
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: =
TOKEN_ALPHA: fmt
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: ;
TOKEN_ALPHA: p
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_ALPHA: t
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_ALPHA: col
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_ALPHA: TAB
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: space
TOKEN_SYMBOL: =
TOKEN_SYMBOL: (
TOKEN_DIGIT: 2
TOKEN_DIGIT: 8
TOKEN_SYMBOL: -
TOKEN_ALPHA: col
TOKEN_SYMBOL: )
TOKEN_SYMBOL: >
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ?
TOKEN_SYMBOL: (
TOKEN_DIGIT: 3
TOKEN_DIGIT: 0
TOKEN_SYMBOL: -
TOKEN_ALPHA: col
TOKEN_SYMBOL: )
TOKEN_SYMBOL: :
TOKEN_DIGIT: 2
TOKEN_SYMBOL: ;
TOKEN_ALPHA: fprintf
TOKEN_SYMBOL: (
TOKEN_ALPHA: outputfp
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_SYMBOL: *
TOKEN_ALPHA: c
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: :
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: space
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: '
TOKEN_SYMBOL: #
TOKEN_SYMBOL: '
TOKEN_SYMBOL: ,
TOKEN_ALPHA: get
TOKEN_SYMBOL: _
TOKEN_ALPHA: caller
TOKEN_SYMBOL: _
TOKEN_ALPHA: list
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_ALPHA: line
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: fprintf
TOKEN_SYMBOL: (
TOKEN_ALPHA: outputfp
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_SYMBOL: \
TOKEN_ALPHA: n
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: nostack
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: fmt
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: .
TOKEN_SYMBOL: .
TOKEN_SYMBOL: .
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: fprintf
TOKEN_SYMBOL: (
TOKEN_ALPHA: outputfp
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_SYMBOL: \
TOKEN_ALPHA: t
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: va
TOKEN_SYMBOL: _
TOKEN_ALPHA: list
TOKEN_ALPHA: args
TOKEN_SYMBOL: ;
TOKEN_ALPHA: va
TOKEN_SYMBOL: _
TOKEN_ALPHA: start
TOKEN_SYMBOL: (
TOKEN_ALPHA: args
TOKEN_SYMBOL: ,
TOKEN_ALPHA: fmt
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: vfprintf
TOKEN_SYMBOL: (
TOKEN_ALPHA: outputfp
TOKEN_SYMBOL: ,
TOKEN_ALPHA: fmt
TOKEN_SYMBOL: ,
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: va
TOKEN_SYMBOL: _
TOKEN_ALPHA: end
TOKEN_SYMBOL: (
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: fprintf
TOKEN_SYMBOL: (
TOKEN_ALPHA: outputfp
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_SYMBOL: \
TOKEN_ALPHA: n
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: get
TOKEN_SYMBOL: _
TOKEN_ALPHA: int
TOKEN_SYMBOL: _
TOKEN_ALPHA: reg
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: char
TOKEN_ALPHA: r
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: r
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_ALPHA: a
TOKEN_SYMBOL: '
TOKEN_SYMBOL: |
TOKEN_SYMBOL: |
TOKEN_ALPHA: r
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_ALPHA: c
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_DIGIT: 1
TOKEN_SYMBOL: :
TOKEN_ALPHA: return
TOKEN_SYMBOL: (
TOKEN_ALPHA: r
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_ALPHA: a
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ?
TOKEN_SYMBOL: "
TOKEN_ALPHA: al
TOKEN_SYMBOL: "
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_ALPHA: cl
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_DIGIT: 2
TOKEN_SYMBOL: :
TOKEN_ALPHA: return
TOKEN_SYMBOL: (
TOKEN_ALPHA: r
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_ALPHA: a
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ?
TOKEN_SYMBOL: "
TOKEN_ALPHA: ax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_ALPHA: cx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_DIGIT: 4
TOKEN_SYMBOL: :
TOKEN_ALPHA: return
TOKEN_SYMBOL: (
TOKEN_ALPHA: r
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_ALPHA: a
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ?
TOKEN_SYMBOL: "
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_ALPHA: ecx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_DIGIT: 8
TOKEN_SYMBOL: :
TOKEN_ALPHA: return
TOKEN_SYMBOL: (
TOKEN_ALPHA: r
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_ALPHA: a
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ?
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: Unknown
TOKEN_ALPHA: data
TOKEN_ALPHA: size
TOKEN_SYMBOL: :
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: :
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: ty
TOKEN_DIGIT: 2
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: get
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: _
TOKEN_ALPHA: inst
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_DIGIT: 1
TOKEN_SYMBOL: :
TOKEN_ALPHA: return
TOKEN_SYMBOL: "
TOKEN_ALPHA: movsbq
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_DIGIT: 2
TOKEN_SYMBOL: :
TOKEN_ALPHA: return
TOKEN_SYMBOL: "
TOKEN_ALPHA: movswq
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_DIGIT: 4
TOKEN_SYMBOL: :
TOKEN_ALPHA: return
TOKEN_SYMBOL: "
TOKEN_ALPHA: movslq
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_DIGIT: 8
TOKEN_SYMBOL: :
TOKEN_ALPHA: return
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: Unknown
TOKEN_ALPHA: data
TOKEN_ALPHA: size
TOKEN_SYMBOL: :
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: :
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: ty
TOKEN_DIGIT: 2
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: int
TOKEN_ALPHA: align
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: n
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: m
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: int
TOKEN_ALPHA: rem
TOKEN_SYMBOL: =
TOKEN_ALPHA: n
TOKEN_SYMBOL: %
TOKEN_ALPHA: m
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: (
TOKEN_ALPHA: rem
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ?
TOKEN_ALPHA: n
TOKEN_SYMBOL: :
TOKEN_ALPHA: n
TOKEN_SYMBOL: -
TOKEN_ALPHA: rem
TOKEN_SYMBOL: +
TOKEN_ALPHA: m
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: reg
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: sub
TOKEN_SYMBOL: $
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movsd
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: reg
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: reg
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movsd
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: reg
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: add
TOKEN_SYMBOL: $
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: >
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: reg
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: push
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: reg
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: reg
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: pop
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: reg
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: >
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: int
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: struct
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: aligned
TOKEN_SYMBOL: =
TOKEN_ALPHA: align
TOKEN_SYMBOL: (
TOKEN_ALPHA: size
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: sub
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: aligned
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: -
TOKEN_DIGIT: 8
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_DIGIT: 6
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movq
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 4
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movb
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movb
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_ALPHA: b
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: -
TOKEN_DIGIT: 8
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_DIGIT: 6
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_ALPHA: aligned
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_ALPHA: aligned
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitshift
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitsize
TOKEN_SYMBOL: <
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: shr
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitoff
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 0
TOKEN_ALPHA: x
TOKEN_SYMBOL: %
TOKEN_ALPHA: lx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_DIGIT: 1
TOKEN_SYMBOL: <
TOKEN_SYMBOL: <
TOKEN_SYMBOL: (
TOKEN_ALPHA: long
TOKEN_SYMBOL: )
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitsize
TOKEN_SYMBOL: )
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: and
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitshift
TOKEN_SYMBOL: _
TOKEN_ALPHA: save
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: addr
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitsize
TOKEN_SYMBOL: <
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rdi
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 0
TOKEN_ALPHA: x
TOKEN_SYMBOL: %
TOKEN_ALPHA: lx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rdi
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_DIGIT: 1
TOKEN_SYMBOL: <
TOKEN_SYMBOL: <
TOKEN_SYMBOL: (
TOKEN_ALPHA: long
TOKEN_SYMBOL: )
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitsize
TOKEN_SYMBOL: )
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: and
TOKEN_SYMBOL: #
TOKEN_ALPHA: rdi
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: shl
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitoff
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: addr
TOKEN_SYMBOL: ,
TOKEN_ALPHA: get
TOKEN_SYMBOL: _
TOKEN_ALPHA: int
TOKEN_SYMBOL: _
TOKEN_ALPHA: reg
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: '
TOKEN_ALPHA: c
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 0
TOKEN_ALPHA: x
TOKEN_SYMBOL: %
TOKEN_ALPHA: lx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rdi
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: ~
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_DIGIT: 1
TOKEN_SYMBOL: <
TOKEN_SYMBOL: <
TOKEN_SYMBOL: (
TOKEN_ALPHA: long
TOKEN_SYMBOL: )
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitsize
TOKEN_SYMBOL: )
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: <
TOKEN_SYMBOL: <
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitoff
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: and
TOKEN_SYMBOL: #
TOKEN_ALPHA: rdi
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: or
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rdi
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: gload
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: label
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: ARRAY
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: lea
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: +
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rip
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: label
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: lea
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rip
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: label
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: inst
TOKEN_SYMBOL: =
TOKEN_ALPHA: get
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: _
TOKEN_ALPHA: inst
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: +
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rip
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: inst
TOKEN_SYMBOL: ,
TOKEN_ALPHA: label
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitshift
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: intcast
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: BOOL
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: CHAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: usig
TOKEN_SYMBOL: ?
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movzbq
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movsbq
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: SHORT
TOKEN_SYMBOL: :
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: usig
TOKEN_SYMBOL: ?
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movzwq
TOKEN_SYMBOL: #
TOKEN_ALPHA: ax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movswq
TOKEN_SYMBOL: #
TOKEN_ALPHA: ax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: INT
TOKEN_SYMBOL: :
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: usig
TOKEN_SYMBOL: ?
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cltq
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LONG
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LLONG
TOKEN_SYMBOL: :
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: toint
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: FLOAT
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cvttss
TOKEN_DIGIT: 2
TOKEN_ALPHA: si
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: DOUBLE
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cvttsd
TOKEN_DIGIT: 2
TOKEN_ALPHA: si
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lload
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: base
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: ARRAY
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: lea
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: base
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: FLOAT
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movss
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: base
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: DOUBLE
TOKEN_SYMBOL: |
TOKEN_SYMBOL: |
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LDOUBLE
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movsd
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: base
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: inst
TOKEN_SYMBOL: =
TOKEN_ALPHA: get
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: _
TOKEN_ALPHA: inst
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: inst
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: base
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitshift
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: convert
TOKEN_SYMBOL: _
TOKEN_ALPHA: bool
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: BOOL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: test
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: setne
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: gsave
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: varname
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: !
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: ARRAY
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: convert
TOKEN_SYMBOL: _
TOKEN_ALPHA: bool
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: reg
TOKEN_SYMBOL: =
TOKEN_ALPHA: get
TOKEN_SYMBOL: _
TOKEN_ALPHA: int
TOKEN_SYMBOL: _
TOKEN_ALPHA: reg
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: '
TOKEN_ALPHA: a
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: addr
TOKEN_SYMBOL: =
TOKEN_ALPHA: format
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: +
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: %
TOKEN_SYMBOL: %
TOKEN_ALPHA: rip
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: varname
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitshift
TOKEN_SYMBOL: _
TOKEN_ALPHA: save
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: addr
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: reg
TOKEN_SYMBOL: ,
TOKEN_ALPHA: addr
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lsave
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: FLOAT
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movss
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: DOUBLE
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movsd
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: convert
TOKEN_SYMBOL: _
TOKEN_ALPHA: bool
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: reg
TOKEN_SYMBOL: =
TOKEN_ALPHA: get
TOKEN_SYMBOL: _
TOKEN_ALPHA: int
TOKEN_SYMBOL: _
TOKEN_ALPHA: reg
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: '
TOKEN_ALPHA: a
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: addr
TOKEN_SYMBOL: =
TOKEN_ALPHA: format
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: %
TOKEN_SYMBOL: %
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitshift
TOKEN_SYMBOL: _
TOKEN_ALPHA: save
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: addr
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: reg
TOKEN_SYMBOL: ,
TOKEN_ALPHA: addr
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: do
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: assign
TOKEN_SYMBOL: _
TOKEN_ALPHA: deref
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: reg
TOKEN_SYMBOL: =
TOKEN_ALPHA: get
TOKEN_SYMBOL: _
TOKEN_ALPHA: int
TOKEN_SYMBOL: _
TOKEN_ALPHA: reg
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: '
TOKEN_ALPHA: c
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: reg
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: reg
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: assign
TOKEN_SYMBOL: _
TOKEN_ALPHA: deref
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: var
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: var
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: do
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: assign
TOKEN_SYMBOL: _
TOKEN_ALPHA: deref
TOKEN_SYMBOL: (
TOKEN_ALPHA: var
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: pointer
TOKEN_SYMBOL: _
TOKEN_ALPHA: arith
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_ALPHA: kind
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: left
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: size
TOKEN_SYMBOL: =
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: size
TOKEN_SYMBOL: >
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: imul
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: +
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: add
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: -
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: sub
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: invalid
TOKEN_ALPHA: operator
TOKEN_SYMBOL: '
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: '
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: zero
TOKEN_SYMBOL: _
TOKEN_ALPHA: filler
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: start
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: end
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_SYMBOL: ;
TOKEN_ALPHA: start
TOKEN_SYMBOL: <
TOKEN_SYMBOL: =
TOKEN_ALPHA: end
TOKEN_SYMBOL: -
TOKEN_DIGIT: 4
TOKEN_SYMBOL: ;
TOKEN_ALPHA: start
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 4
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: $
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: start
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_SYMBOL: ;
TOKEN_ALPHA: start
TOKEN_SYMBOL: <
TOKEN_ALPHA: end
TOKEN_SYMBOL: ;
TOKEN_ALPHA: start
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movb
TOKEN_SYMBOL: $
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: start
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: ensure
TOKEN_SYMBOL: _
TOKEN_ALPHA: lvar
TOKEN_SYMBOL: _
TOKEN_ALPHA: init
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LVAR
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: lvarinit
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: decl
TOKEN_SYMBOL: _
TOKEN_ALPHA: init
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: lvarinit
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: loff
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: lvarinit
TOKEN_SYMBOL: =
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: assign
TOKEN_SYMBOL: _
TOKEN_ALPHA: struct
TOKEN_SYMBOL: _
TOKEN_ALPHA: ref
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: struc
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: field
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LVAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: ensure
TOKEN_SYMBOL: _
TOKEN_ALPHA: lvar
TOKEN_SYMBOL: _
TOKEN_ALPHA: init
TOKEN_SYMBOL: (
TOKEN_ALPHA: struc
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lsave
TOKEN_SYMBOL: (
TOKEN_ALPHA: field
TOKEN_SYMBOL: ,
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: loff
TOKEN_SYMBOL: +
TOKEN_ALPHA: field
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: offset
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: GVAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: gsave
TOKEN_SYMBOL: (
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: ,
TOKEN_ALPHA: field
TOKEN_SYMBOL: ,
TOKEN_ALPHA: field
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: offset
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: STRUCT
TOKEN_SYMBOL: _
TOKEN_ALPHA: REF
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: assign
TOKEN_SYMBOL: _
TOKEN_ALPHA: struct
TOKEN_SYMBOL: _
TOKEN_ALPHA: ref
TOKEN_SYMBOL: (
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: struc
TOKEN_SYMBOL: ,
TOKEN_ALPHA: field
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: +
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: offset
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: DEREF
TOKEN_SYMBOL: :
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: do
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: assign
TOKEN_SYMBOL: _
TOKEN_ALPHA: deref
TOKEN_SYMBOL: (
TOKEN_ALPHA: field
TOKEN_SYMBOL: ,
TOKEN_ALPHA: field
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: offset
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: internal
TOKEN_ALPHA: error
TOKEN_SYMBOL: :
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_DIGIT: 2
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_ALPHA: struc
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: _
TOKEN_ALPHA: struct
TOKEN_SYMBOL: _
TOKEN_ALPHA: ref
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: struc
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: field
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LVAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: ensure
TOKEN_SYMBOL: _
TOKEN_ALPHA: lvar
TOKEN_SYMBOL: _
TOKEN_ALPHA: init
TOKEN_SYMBOL: (
TOKEN_ALPHA: struc
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lload
TOKEN_SYMBOL: (
TOKEN_ALPHA: field
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: loff
TOKEN_SYMBOL: +
TOKEN_ALPHA: field
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: offset
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: GVAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: gload
TOKEN_SYMBOL: (
TOKEN_ALPHA: field
TOKEN_SYMBOL: ,
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: ,
TOKEN_ALPHA: field
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: offset
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: STRUCT
TOKEN_SYMBOL: _
TOKEN_ALPHA: REF
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: _
TOKEN_ALPHA: struct
TOKEN_SYMBOL: _
TOKEN_ALPHA: ref
TOKEN_SYMBOL: (
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: struc
TOKEN_SYMBOL: ,
TOKEN_ALPHA: field
TOKEN_SYMBOL: ,
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: offset
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: DEREF
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: struc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lload
TOKEN_SYMBOL: (
TOKEN_ALPHA: field
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: field
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: offset
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: internal
TOKEN_ALPHA: error
TOKEN_SYMBOL: :
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_DIGIT: 2
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_ALPHA: struc
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: store
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: var
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: var
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: DEREF
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: assign
TOKEN_SYMBOL: _
TOKEN_ALPHA: deref
TOKEN_SYMBOL: (
TOKEN_ALPHA: var
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: STRUCT
TOKEN_SYMBOL: _
TOKEN_ALPHA: REF
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: assign
TOKEN_SYMBOL: _
TOKEN_ALPHA: struct
TOKEN_SYMBOL: _
TOKEN_ALPHA: ref
TOKEN_SYMBOL: (
TOKEN_ALPHA: var
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: struc
TOKEN_SYMBOL: ,
TOKEN_ALPHA: var
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LVAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: ensure
TOKEN_SYMBOL: _
TOKEN_ALPHA: lvar
TOKEN_SYMBOL: _
TOKEN_ALPHA: init
TOKEN_SYMBOL: (
TOKEN_ALPHA: var
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lsave
TOKEN_SYMBOL: (
TOKEN_ALPHA: var
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: var
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: loff
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: GVAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: gsave
TOKEN_SYMBOL: (
TOKEN_ALPHA: var
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: ,
TOKEN_ALPHA: var
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: internal
TOKEN_ALPHA: error
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: to
TOKEN_SYMBOL: _
TOKEN_ALPHA: bool
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: flotype
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: xorpd
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: FLOAT
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ?
TOKEN_SYMBOL: "
TOKEN_ALPHA: ucomiss
TOKEN_SYMBOL: "
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_ALPHA: ucomisd
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: setne
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cmp
TOKEN_SYMBOL: $
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: setne
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movzb
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: comp
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: inst
TOKEN_SYMBOL: ,
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: usiginst
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: flotype
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: FLOAT
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: ucomiss
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: ucomisd
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LONG
TOKEN_SYMBOL: |
TOKEN_SYMBOL: |
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LLONG
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cmp
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cmp
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: ecx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: flotype
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: |
TOKEN_SYMBOL: |
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: usig
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: usiginst
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: inst
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movzb
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: binop
TOKEN_SYMBOL: _
TOKEN_ALPHA: int
TOKEN_SYMBOL: _
TOKEN_ALPHA: arith
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: ;
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: +
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_SYMBOL: "
TOKEN_ALPHA: add
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: -
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_SYMBOL: "
TOKEN_ALPHA: sub
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: *
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_SYMBOL: "
TOKEN_ALPHA: imul
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: ^
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_SYMBOL: "
TOKEN_ALPHA: xor
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: SAL
TOKEN_SYMBOL: :
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_SYMBOL: "
TOKEN_ALPHA: sal
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: SAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_SYMBOL: "
TOKEN_ALPHA: sar
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: SHR
TOKEN_SYMBOL: :
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_SYMBOL: "
TOKEN_ALPHA: shr
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: /
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: %
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: invalid
TOKEN_ALPHA: operator
TOKEN_SYMBOL: '
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: '
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: /
TOKEN_SYMBOL: '
TOKEN_SYMBOL: |
TOKEN_SYMBOL: |
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: %
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: usig
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: xor
TOKEN_SYMBOL: #
TOKEN_ALPHA: edx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: edx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: div
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cqto
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: idiv
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: %
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: edx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: SAL
TOKEN_SYMBOL: |
TOKEN_SYMBOL: |
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: SAR
TOKEN_SYMBOL: |
TOKEN_SYMBOL: |
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: SHR
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: #
TOKEN_ALPHA: cl
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: op
TOKEN_SYMBOL: ,
TOKEN_ALPHA: get
TOKEN_SYMBOL: _
TOKEN_ALPHA: int
TOKEN_SYMBOL: _
TOKEN_ALPHA: reg
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: '
TOKEN_ALPHA: a
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: op
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: binop
TOKEN_SYMBOL: _
TOKEN_ALPHA: float
TOKEN_SYMBOL: _
TOKEN_ALPHA: arith
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: op
TOKEN_SYMBOL: ;
TOKEN_ALPHA: bool
TOKEN_ALPHA: isdouble
TOKEN_SYMBOL: =
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: DOUBLE
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: +
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_SYMBOL: (
TOKEN_ALPHA: isdouble
TOKEN_SYMBOL: ?
TOKEN_SYMBOL: "
TOKEN_ALPHA: addsd
TOKEN_SYMBOL: "
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_ALPHA: addss
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: -
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_SYMBOL: (
TOKEN_ALPHA: isdouble
TOKEN_SYMBOL: ?
TOKEN_SYMBOL: "
TOKEN_ALPHA: subsd
TOKEN_SYMBOL: "
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_ALPHA: subss
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: *
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_SYMBOL: (
TOKEN_ALPHA: isdouble
TOKEN_SYMBOL: ?
TOKEN_SYMBOL: "
TOKEN_ALPHA: mulsd
TOKEN_SYMBOL: "
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_ALPHA: mulss
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: /
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: op
TOKEN_SYMBOL: =
TOKEN_SYMBOL: (
TOKEN_ALPHA: isdouble
TOKEN_SYMBOL: ?
TOKEN_SYMBOL: "
TOKEN_ALPHA: divsd
TOKEN_SYMBOL: "
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_ALPHA: divss
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: invalid
TOKEN_ALPHA: operator
TOKEN_SYMBOL: '
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: '
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_ALPHA: isdouble
TOKEN_SYMBOL: ?
TOKEN_SYMBOL: "
TOKEN_ALPHA: movsd
TOKEN_SYMBOL: "
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_ALPHA: movss
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: op
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: _
TOKEN_ALPHA: convert
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: to
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: from
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: inttype
TOKEN_SYMBOL: (
TOKEN_ALPHA: from
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_ALPHA: to
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: FLOAT
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cvtsi
TOKEN_DIGIT: 2
TOKEN_ALPHA: ss
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: inttype
TOKEN_SYMBOL: (
TOKEN_ALPHA: from
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_ALPHA: to
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: DOUBLE
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cvtsi
TOKEN_DIGIT: 2
TOKEN_ALPHA: sd
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: from
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: FLOAT
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_ALPHA: to
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: DOUBLE
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cvtps
TOKEN_DIGIT: 2
TOKEN_ALPHA: pd
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_ALPHA: from
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: DOUBLE
TOKEN_SYMBOL: |
TOKEN_SYMBOL: |
TOKEN_ALPHA: from
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LDOUBLE
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_ALPHA: to
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: FLOAT
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cvtpd
TOKEN_DIGIT: 2
TOKEN_ALPHA: ps
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: to
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: BOOL
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: to
TOKEN_SYMBOL: _
TOKEN_ALPHA: bool
TOKEN_SYMBOL: (
TOKEN_ALPHA: from
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: inttype
TOKEN_SYMBOL: (
TOKEN_ALPHA: from
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: inttype
TOKEN_SYMBOL: (
TOKEN_ALPHA: to
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: intcast
TOKEN_SYMBOL: (
TOKEN_ALPHA: from
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: inttype
TOKEN_SYMBOL: (
TOKEN_ALPHA: to
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: toint
TOKEN_SYMBOL: (
TOKEN_ALPHA: from
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: ret
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: leave
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: ret
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: binop
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: PTR
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: pointer
TOKEN_SYMBOL: _
TOKEN_ALPHA: arith
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: <
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: comp
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: setl
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: setb
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: EQ
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: comp
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: sete
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: sete
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: LE
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: comp
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: setle
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: setna
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: NE
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: comp
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: setne
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: setne
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: inttype
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: binop
TOKEN_SYMBOL: _
TOKEN_ALPHA: int
TOKEN_SYMBOL: _
TOKEN_ALPHA: arith
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: flotype
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: binop
TOKEN_SYMBOL: _
TOKEN_ALPHA: float
TOKEN_SYMBOL: _
TOKEN_ALPHA: arith
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: internal
TOKEN_ALPHA: error
TOKEN_SYMBOL: :
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_DIGIT: 2
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: save
TOKEN_SYMBOL: _
TOKEN_ALPHA: literal
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: totype
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: BOOL
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movb
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: !
TOKEN_SYMBOL: !
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ival
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: CHAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movb
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ival
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: SHORT
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movw
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ival
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: INT
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ival
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LONG
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LLONG
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: PTR
TOKEN_SYMBOL: :
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: lu
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_ALPHA: uint
TOKEN_DIGIT: 6
TOKEN_DIGIT: 4
TOKEN_SYMBOL: _
TOKEN_ALPHA: t
TOKEN_SYMBOL: )
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ival
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_DIGIT: 1
TOKEN_ALPHA: L
TOKEN_SYMBOL: <
TOKEN_SYMBOL: <
TOKEN_DIGIT: 3
TOKEN_DIGIT: 2
TOKEN_SYMBOL: )
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: lu
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_ALPHA: uint
TOKEN_DIGIT: 6
TOKEN_DIGIT: 4
TOKEN_SYMBOL: _
TOKEN_ALPHA: t
TOKEN_SYMBOL: )
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ival
TOKEN_SYMBOL: )
TOKEN_SYMBOL: >
TOKEN_SYMBOL: >
TOKEN_DIGIT: 3
TOKEN_DIGIT: 2
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: +
TOKEN_DIGIT: 4
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: FLOAT
TOKEN_SYMBOL: :
TOKEN_SYMBOL: {
TOKEN_ALPHA: float
TOKEN_ALPHA: fval
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fval
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: u
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: *
TOKEN_SYMBOL: (
TOKEN_ALPHA: uint
TOKEN_DIGIT: 3
TOKEN_DIGIT: 2
TOKEN_SYMBOL: _
TOKEN_ALPHA: t
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_ALPHA: fval
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: DOUBLE
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LDOUBLE
TOKEN_SYMBOL: :
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: lu
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: *
TOKEN_SYMBOL: (
TOKEN_ALPHA: uint
TOKEN_DIGIT: 6
TOKEN_DIGIT: 4
TOKEN_SYMBOL: _
TOKEN_ALPHA: t
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fval
TOKEN_SYMBOL: &
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_DIGIT: 1
TOKEN_ALPHA: L
TOKEN_SYMBOL: <
TOKEN_SYMBOL: <
TOKEN_DIGIT: 3
TOKEN_DIGIT: 2
TOKEN_SYMBOL: )
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: lu
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: *
TOKEN_SYMBOL: (
TOKEN_ALPHA: uint
TOKEN_DIGIT: 6
TOKEN_DIGIT: 4
TOKEN_SYMBOL: _
TOKEN_ALPHA: t
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fval
TOKEN_SYMBOL: >
TOKEN_SYMBOL: >
TOKEN_DIGIT: 3
TOKEN_DIGIT: 2
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: +
TOKEN_DIGIT: 4
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: internal
TOKEN_ALPHA: error
TOKEN_SYMBOL: :
TOKEN_SYMBOL: <
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: >
TOKEN_SYMBOL: <
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: >
TOKEN_SYMBOL: <
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: >
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_DIGIT: 2
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_ALPHA: ty
TOKEN_DIGIT: 2
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_ALPHA: totype
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LVAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: ensure
TOKEN_SYMBOL: _
TOKEN_ALPHA: lvar
TOKEN_SYMBOL: _
TOKEN_ALPHA: init
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: lea
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: loff
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: GVAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: lea
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rip
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: DEREF
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: STRUCT
TOKEN_SYMBOL: _
TOKEN_ALPHA: REF
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: struc
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: add
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: offset
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: FUNCDESG
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: lea
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rip
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fname
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: internal
TOKEN_ALPHA: error
TOKEN_SYMBOL: :
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_DIGIT: 2
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: copy
TOKEN_SYMBOL: _
TOKEN_ALPHA: struct
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: left
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movq
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movq
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 4
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movb
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movb
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: int
TOKEN_ALPHA: cmpinit
TOKEN_SYMBOL: (
TOKEN_ALPHA: const
TOKEN_ALPHA: void
TOKEN_SYMBOL: *
TOKEN_ALPHA: x
TOKEN_SYMBOL: ,
TOKEN_ALPHA: const
TOKEN_ALPHA: void
TOKEN_SYMBOL: *
TOKEN_ALPHA: y
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: a
TOKEN_SYMBOL: =
TOKEN_SYMBOL: *
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_ALPHA: x
TOKEN_SYMBOL: ;
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: b
TOKEN_SYMBOL: =
TOKEN_SYMBOL: *
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_ALPHA: y
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_ALPHA: a
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initoff
TOKEN_SYMBOL: -
TOKEN_ALPHA: b
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initoff
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: fill
TOKEN_SYMBOL: _
TOKEN_ALPHA: holes
TOKEN_SYMBOL: (
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: inits
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: totalsize
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_SYMBOL: /
TOKEN_SYMBOL: /
TOKEN_ALPHA: If
TOKEN_ALPHA: at
TOKEN_ALPHA: least
TOKEN_ALPHA: one
TOKEN_ALPHA: of
TOKEN_ALPHA: the
TOKEN_ALPHA: fields
TOKEN_ALPHA: in
TOKEN_ALPHA: a
TOKEN_ALPHA: variable
TOKEN_ALPHA: are
TOKEN_ALPHA: initialized
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: /
TOKEN_SYMBOL: /
TOKEN_ALPHA: unspecified
TOKEN_ALPHA: fields
TOKEN_ALPHA: has
TOKEN_ALPHA: to
TOKEN_ALPHA: be
TOKEN_ALPHA: initialized
TOKEN_ALPHA: with
TOKEN_DIGIT: 0
TOKEN_SYMBOL: .
TOKEN_ALPHA: int
TOKEN_ALPHA: len
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: inits
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_SYMBOL: *
TOKEN_ALPHA: buf
TOKEN_SYMBOL: =
TOKEN_ALPHA: malloc
TOKEN_SYMBOL: (
TOKEN_ALPHA: len
TOKEN_SYMBOL: *
TOKEN_ALPHA: sizeof
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: len
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_ALPHA: buf
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: inits
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: qsort
TOKEN_SYMBOL: (
TOKEN_ALPHA: buf
TOKEN_SYMBOL: ,
TOKEN_ALPHA: len
TOKEN_SYMBOL: ,
TOKEN_ALPHA: sizeof
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_ALPHA: cmpinit
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: lastend
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: len
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: =
TOKEN_ALPHA: buf
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: lastend
TOKEN_SYMBOL: <
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initoff
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: zero
TOKEN_SYMBOL: _
TOKEN_ALPHA: filler
TOKEN_SYMBOL: (
TOKEN_ALPHA: lastend
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initoff
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: lastend
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initoff
TOKEN_SYMBOL: +
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: zero
TOKEN_SYMBOL: _
TOKEN_ALPHA: filler
TOKEN_SYMBOL: (
TOKEN_ALPHA: lastend
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: totalsize
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: decl
TOKEN_SYMBOL: _
TOKEN_ALPHA: init
TOKEN_SYMBOL: (
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: inits
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: totalsize
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: fill
TOKEN_SYMBOL: _
TOKEN_ALPHA: holes
TOKEN_SYMBOL: (
TOKEN_ALPHA: inits
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: totalsize
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: inits
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: inits
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: INIT
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: bool
TOKEN_ALPHA: isbitfield
TOKEN_SYMBOL: =
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitsize
TOKEN_SYMBOL: >
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initval
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LITERAL
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_SYMBOL: !
TOKEN_ALPHA: isbitfield
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: save
TOKEN_SYMBOL: _
TOKEN_ALPHA: literal
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initval
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initoff
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initval
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lsave
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initoff
TOKEN_SYMBOL: +
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: pre
TOKEN_SYMBOL: _
TOKEN_ALPHA: inc
TOKEN_SYMBOL: _
TOKEN_ALPHA: dec
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: ,
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: op
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: op
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: ?
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: :
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: store
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: post
TOKEN_SYMBOL: _
TOKEN_ALPHA: inc
TOKEN_SYMBOL: _
TOKEN_ALPHA: dec
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: ,
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: op
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: op
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: ?
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: :
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: store
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: set
TOKEN_SYMBOL: _
TOKEN_ALPHA: reg
TOKEN_SYMBOL: _
TOKEN_ALPHA: nums
TOKEN_SYMBOL: (
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: numgp
TOKEN_SYMBOL: =
TOKEN_ALPHA: numfp
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: arg
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: args
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: flotype
TOKEN_SYMBOL: (
TOKEN_ALPHA: arg
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_ALPHA: numfp
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: numgp
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: je
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: label
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: test
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: je
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: label
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: label
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: label
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: jmp
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: label
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: jmp
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: label
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: literal
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: BOOL
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: CHAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: SHORT
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: u
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ival
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: INT
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: u
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ival
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LONG
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LLONG
TOKEN_SYMBOL: :
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: lu
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ival
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: FLOAT
TOKEN_SYMBOL: :
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: flabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: flabel
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: float
TOKEN_ALPHA: fval
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fval
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: noindent
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: data
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: flabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: long
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: *
TOKEN_SYMBOL: (
TOKEN_ALPHA: uint
TOKEN_DIGIT: 3
TOKEN_DIGIT: 2
TOKEN_SYMBOL: _
TOKEN_ALPHA: t
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_ALPHA: fval
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: noindent
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: text
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movss
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rip
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: flabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: DOUBLE
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LDOUBLE
TOKEN_SYMBOL: :
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: flabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: flabel
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: noindent
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: data
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: flabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: quad
TOKEN_SYMBOL: %
TOKEN_ALPHA: lu
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: *
TOKEN_SYMBOL: (
TOKEN_ALPHA: uint
TOKEN_DIGIT: 6
TOKEN_DIGIT: 4
TOKEN_SYMBOL: _
TOKEN_ALPHA: t
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fval
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: noindent
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: text
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movsd
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rip
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: flabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: ARRAY
TOKEN_SYMBOL: :
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: slabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: slabel
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: noindent
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: data
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: slabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: string
TOKEN_SYMBOL: \
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: \
TOKEN_SYMBOL: "
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: quote
TOKEN_SYMBOL: _
TOKEN_ALPHA: cstring
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: sval
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: noindent
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: text
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: lea
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rip
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: slabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: internal
TOKEN_ALPHA: error
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_SYMBOL: *
TOKEN_ALPHA: split
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: buf
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: =
TOKEN_ALPHA: buf
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: len
TOKEN_SYMBOL: =
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ;
TOKEN_ALPHA: while
TOKEN_SYMBOL: (
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: p
TOKEN_SYMBOL: [
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_ALPHA: r
TOKEN_SYMBOL: '
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_ALPHA: p
TOKEN_SYMBOL: [
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_ALPHA: n
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: len
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ;
TOKEN_ALPHA: p
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 2
TOKEN_SYMBOL: ;
TOKEN_ALPHA: continue
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: p
TOKEN_SYMBOL: [
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_ALPHA: r
TOKEN_SYMBOL: '
TOKEN_SYMBOL: |
TOKEN_SYMBOL: |
TOKEN_ALPHA: p
TOKEN_SYMBOL: [
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_ALPHA: n
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_ALPHA: len
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ;
TOKEN_ALPHA: p
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: p
TOKEN_SYMBOL: =
TOKEN_ALPHA: buf
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_SYMBOL: *
TOKEN_ALPHA: r
TOKEN_SYMBOL: =
TOKEN_ALPHA: malloc
TOKEN_SYMBOL: (
TOKEN_ALPHA: sizeof
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_SYMBOL: *
TOKEN_ALPHA: len
TOKEN_SYMBOL: +
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: while
TOKEN_SYMBOL: (
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: p
TOKEN_SYMBOL: [
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_ALPHA: r
TOKEN_SYMBOL: '
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_ALPHA: p
TOKEN_SYMBOL: [
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_ALPHA: n
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: p
TOKEN_SYMBOL: [
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_DIGIT: 0
TOKEN_SYMBOL: '
TOKEN_SYMBOL: ;
TOKEN_ALPHA: p
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 2
TOKEN_SYMBOL: ;
TOKEN_ALPHA: r
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_ALPHA: p
TOKEN_SYMBOL: ;
TOKEN_ALPHA: continue
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: p
TOKEN_SYMBOL: [
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_ALPHA: r
TOKEN_SYMBOL: '
TOKEN_SYMBOL: |
TOKEN_SYMBOL: |
TOKEN_ALPHA: p
TOKEN_SYMBOL: [
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_ALPHA: n
TOKEN_SYMBOL: '
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: p
TOKEN_SYMBOL: [
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_DIGIT: 0
TOKEN_SYMBOL: '
TOKEN_SYMBOL: ;
TOKEN_ALPHA: r
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_ALPHA: p
TOKEN_SYMBOL: +
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: p
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: r
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_ALPHA: r
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_SYMBOL: *
TOKEN_ALPHA: read
TOKEN_SYMBOL: _
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: file
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: file
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: FILE
TOKEN_SYMBOL: *
TOKEN_ALPHA: fp
TOKEN_SYMBOL: =
TOKEN_ALPHA: fopen
TOKEN_SYMBOL: (
TOKEN_ALPHA: file
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: fp
TOKEN_SYMBOL: )
TOKEN_ALPHA: return
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: ;
TOKEN_ALPHA: struct
TOKEN_ALPHA: stat
TOKEN_ALPHA: st
TOKEN_SYMBOL: ;
TOKEN_ALPHA: fstat
TOKEN_SYMBOL: (
TOKEN_ALPHA: fileno
TOKEN_SYMBOL: (
TOKEN_ALPHA: fp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: &
TOKEN_ALPHA: st
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: buf
TOKEN_SYMBOL: =
TOKEN_ALPHA: malloc
TOKEN_SYMBOL: (
TOKEN_ALPHA: st
TOKEN_SYMBOL: .
TOKEN_ALPHA: st
TOKEN_SYMBOL: _
TOKEN_ALPHA: size
TOKEN_SYMBOL: +
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: fread
TOKEN_SYMBOL: (
TOKEN_ALPHA: buf
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_ALPHA: st
TOKEN_SYMBOL: .
TOKEN_ALPHA: st
TOKEN_SYMBOL: _
TOKEN_ALPHA: size
TOKEN_SYMBOL: ,
TOKEN_ALPHA: fp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: !
TOKEN_SYMBOL: =
TOKEN_ALPHA: st
TOKEN_SYMBOL: .
TOKEN_ALPHA: st
TOKEN_SYMBOL: _
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: fclose
TOKEN_SYMBOL: (
TOKEN_ALPHA: fp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: fclose
TOKEN_SYMBOL: (
TOKEN_ALPHA: fp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: buf
TOKEN_SYMBOL: [
TOKEN_ALPHA: st
TOKEN_SYMBOL: .
TOKEN_ALPHA: st
TOKEN_SYMBOL: _
TOKEN_ALPHA: size
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: \
TOKEN_DIGIT: 0
TOKEN_SYMBOL: '
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_ALPHA: split
TOKEN_SYMBOL: (
TOKEN_ALPHA: buf
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: print
TOKEN_SYMBOL: _
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: line
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: file
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: line
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: dumpsource
TOKEN_SYMBOL: )
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_SYMBOL: *
TOKEN_ALPHA: lines
TOKEN_SYMBOL: =
TOKEN_ALPHA: map
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: lines
TOKEN_SYMBOL: ,
TOKEN_ALPHA: file
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: lines
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: lines
TOKEN_SYMBOL: =
TOKEN_ALPHA: read
TOKEN_SYMBOL: _
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: file
TOKEN_SYMBOL: (
TOKEN_ALPHA: file
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: lines
TOKEN_SYMBOL: )
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: map
TOKEN_SYMBOL: _
TOKEN_ALPHA: put
TOKEN_SYMBOL: (
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: lines
TOKEN_SYMBOL: ,
TOKEN_ALPHA: file
TOKEN_SYMBOL: ,
TOKEN_ALPHA: lines
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: int
TOKEN_ALPHA: len
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: =
TOKEN_ALPHA: lines
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: *
TOKEN_ALPHA: p
TOKEN_SYMBOL: ;
TOKEN_ALPHA: p
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_ALPHA: len
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: nostack
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: lines
TOKEN_SYMBOL: [
TOKEN_ALPHA: line
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: print
TOKEN_SYMBOL: _
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: loc
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: sourceLoc
TOKEN_SYMBOL: )
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: file
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: sourceLoc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: file
TOKEN_SYMBOL: ;
TOKEN_ALPHA: long
TOKEN_ALPHA: fileno
TOKEN_SYMBOL: =
TOKEN_SYMBOL: (
TOKEN_ALPHA: long
TOKEN_SYMBOL: )
TOKEN_ALPHA: map
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: files
TOKEN_SYMBOL: ,
TOKEN_ALPHA: file
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: fileno
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: fileno
TOKEN_SYMBOL: =
TOKEN_ALPHA: map
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: files
TOKEN_SYMBOL: )
TOKEN_SYMBOL: +
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ;
TOKEN_ALPHA: map
TOKEN_SYMBOL: _
TOKEN_ALPHA: put
TOKEN_SYMBOL: (
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: files
TOKEN_SYMBOL: ,
TOKEN_ALPHA: file
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_ALPHA: void
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_ALPHA: fileno
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: file
TOKEN_SYMBOL: %
TOKEN_ALPHA: ld
TOKEN_SYMBOL: \
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: \
TOKEN_SYMBOL: "
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: fileno
TOKEN_SYMBOL: ,
TOKEN_ALPHA: quote
TOKEN_SYMBOL: _
TOKEN_ALPHA: cstring
TOKEN_SYMBOL: (
TOKEN_ALPHA: file
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: loc
TOKEN_SYMBOL: =
TOKEN_ALPHA: format
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: loc
TOKEN_SYMBOL: %
TOKEN_ALPHA: ld
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: fileno
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: sourceLoc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: line
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: strcmp
TOKEN_SYMBOL: (
TOKEN_ALPHA: loc
TOKEN_SYMBOL: ,
TOKEN_ALPHA: last
TOKEN_SYMBOL: _
TOKEN_ALPHA: loc
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: loc
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: print
TOKEN_SYMBOL: _
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: line
TOKEN_SYMBOL: (
TOKEN_ALPHA: file
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: sourceLoc
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: line
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: last
TOKEN_SYMBOL: _
TOKEN_ALPHA: loc
TOKEN_SYMBOL: =
TOKEN_ALPHA: loc
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lvar
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: ensure
TOKEN_SYMBOL: _
TOKEN_ALPHA: lvar
TOKEN_SYMBOL: _
TOKEN_ALPHA: init
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lload
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: loff
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: gvar
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: gload
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: builtin
TOKEN_SYMBOL: _
TOKEN_ALPHA: return
TOKEN_SYMBOL: _
TOKEN_ALPHA: address
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: head
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: loop
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: end
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: loop
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: test
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: jz
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: end
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: sub
TOKEN_SYMBOL: $
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: jmp
TOKEN_SYMBOL: (
TOKEN_ALPHA: loop
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: end
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_DIGIT: 8
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: /
TOKEN_SYMBOL: /
TOKEN_ALPHA: Set
TOKEN_ALPHA: the
TOKEN_ALPHA: register
TOKEN_ALPHA: class
TOKEN_ALPHA: for
TOKEN_ALPHA: parameter
TOKEN_ALPHA: passing
TOKEN_ALPHA: to
TOKEN_ALPHA: RAX
TOKEN_SYMBOL: .
TOKEN_SYMBOL: /
TOKEN_SYMBOL: /
TOKEN_DIGIT: 0
TOKEN_ALPHA: is
TOKEN_ALPHA: INTEGER
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 1
TOKEN_ALPHA: is
TOKEN_ALPHA: SSE
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 2
TOKEN_ALPHA: is
TOKEN_ALPHA: MEMORY
TOKEN_SYMBOL: .
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: builtin
TOKEN_SYMBOL: _
TOKEN_ALPHA: reg
TOKEN_SYMBOL: _
TOKEN_ALPHA: class
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: arg
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: args
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: arg
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: PTR
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: =
TOKEN_ALPHA: arg
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: STRUCT
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 2
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: flotype
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: builtin
TOKEN_SYMBOL: _
TOKEN_ALPHA: va
TOKEN_SYMBOL: _
TOKEN_ALPHA: start
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: head
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: numgp
TOKEN_SYMBOL: *
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movl
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 4
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 4
TOKEN_DIGIT: 8
TOKEN_SYMBOL: +
TOKEN_ALPHA: numfp
TOKEN_SYMBOL: *
TOKEN_DIGIT: 1
TOKEN_DIGIT: 6
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: lea
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: -
TOKEN_ALPHA: REGAREA
TOKEN_SYMBOL: _
TOKEN_ALPHA: SIZE
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 1
TOKEN_DIGIT: 6
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: bool
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: builtin
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: strcmp
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_ALPHA: builtin
TOKEN_SYMBOL: _
TOKEN_ALPHA: return
TOKEN_SYMBOL: _
TOKEN_ALPHA: address
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fname
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: builtin
TOKEN_SYMBOL: _
TOKEN_ALPHA: return
TOKEN_SYMBOL: _
TOKEN_ALPHA: address
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_ALPHA: true
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: strcmp
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_ALPHA: builtin
TOKEN_SYMBOL: _
TOKEN_ALPHA: reg
TOKEN_SYMBOL: _
TOKEN_ALPHA: class
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fname
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: builtin
TOKEN_SYMBOL: _
TOKEN_ALPHA: reg
TOKEN_SYMBOL: _
TOKEN_ALPHA: class
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_ALPHA: true
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: strcmp
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: _
TOKEN_SYMBOL: _
TOKEN_ALPHA: builtin
TOKEN_SYMBOL: _
TOKEN_ALPHA: va
TOKEN_SYMBOL: _
TOKEN_ALPHA: start
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fname
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: builtin
TOKEN_SYMBOL: _
TOKEN_ALPHA: va
TOKEN_SYMBOL: _
TOKEN_ALPHA: start
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_ALPHA: true
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: return
TOKEN_ALPHA: false
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: classify
TOKEN_SYMBOL: _
TOKEN_ALPHA: args
TOKEN_SYMBOL: (
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: ints
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: floats
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: rest
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: ireg
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_ALPHA: xreg
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: imax
TOKEN_SYMBOL: =
TOKEN_DIGIT: 6
TOKEN_SYMBOL: ,
TOKEN_ALPHA: xmax
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: v
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: args
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: STRUCT
TOKEN_SYMBOL: )
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_ALPHA: rest
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: flotype
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_ALPHA: xreg
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: <
TOKEN_ALPHA: xmax
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ?
TOKEN_ALPHA: floats
TOKEN_SYMBOL: :
TOKEN_ALPHA: rest
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_ALPHA: ireg
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: <
TOKEN_ALPHA: imax
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ?
TOKEN_ALPHA: ints
TOKEN_SYMBOL: :
TOKEN_ALPHA: rest
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: save
TOKEN_SYMBOL: _
TOKEN_ALPHA: arg
TOKEN_SYMBOL: _
TOKEN_ALPHA: regs
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: nints
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: nfloats
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: nints
TOKEN_SYMBOL: <
TOKEN_SYMBOL: =
TOKEN_DIGIT: 6
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: nfloats
TOKEN_SYMBOL: <
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: nints
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_ALPHA: REGS
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: nfloats
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: restore
TOKEN_SYMBOL: _
TOKEN_ALPHA: arg
TOKEN_SYMBOL: _
TOKEN_ALPHA: regs
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: nints
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: nfloats
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_ALPHA: nfloats
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: >
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: -
TOKEN_SYMBOL: -
TOKEN_SYMBOL: )
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_ALPHA: nints
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: >
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: -
TOKEN_SYMBOL: -
TOKEN_SYMBOL: )
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_ALPHA: REGS
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: int
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: args
TOKEN_SYMBOL: (
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: vals
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: r
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: vals
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: v
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: vals
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: STRUCT
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: r
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: struct
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: flotype
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: r
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: r
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: return
TOKEN_ALPHA: r
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: int
TOKEN_SYMBOL: _
TOKEN_ALPHA: args
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: nints
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_ALPHA: nints
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: >
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: -
TOKEN_SYMBOL: -
TOKEN_SYMBOL: )
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_ALPHA: REGS
TOKEN_SYMBOL: [
TOKEN_ALPHA: i
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: float
TOKEN_SYMBOL: _
TOKEN_ALPHA: args
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: nfloats
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_ALPHA: nfloats
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: >
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: -
TOKEN_SYMBOL: -
TOKEN_SYMBOL: )
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: booleanize
TOKEN_SYMBOL: _
TOKEN_ALPHA: retval
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: BOOL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movzx
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: func
TOKEN_SYMBOL: _
TOKEN_ALPHA: call
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: opos
TOKEN_SYMBOL: =
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: ;
TOKEN_ALPHA: bool
TOKEN_ALPHA: isptr
TOKEN_SYMBOL: =
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: FUNCPTR
TOKEN_SYMBOL: _
TOKEN_ALPHA: CALL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ftype
TOKEN_SYMBOL: =
TOKEN_ALPHA: isptr
TOKEN_SYMBOL: ?
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fptr
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: :
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ftype
TOKEN_SYMBOL: ;
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: ints
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: vector
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: floats
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: vector
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: rest
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: vector
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: classify
TOKEN_SYMBOL: _
TOKEN_ALPHA: args
TOKEN_SYMBOL: (
TOKEN_ALPHA: ints
TOKEN_SYMBOL: ,
TOKEN_ALPHA: floats
TOKEN_SYMBOL: ,
TOKEN_ALPHA: rest
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: args
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: save
TOKEN_SYMBOL: _
TOKEN_ALPHA: arg
TOKEN_SYMBOL: _
TOKEN_ALPHA: regs
TOKEN_SYMBOL: (
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: ints
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: floats
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: bool
TOKEN_ALPHA: padding
TOKEN_SYMBOL: =
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: %
TOKEN_DIGIT: 1
TOKEN_DIGIT: 6
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: padding
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: sub
TOKEN_SYMBOL: $
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: int
TOKEN_ALPHA: restsize
TOKEN_SYMBOL: =
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: args
TOKEN_SYMBOL: (
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: reverse
TOKEN_SYMBOL: (
TOKEN_ALPHA: rest
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: isptr
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fptr
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: args
TOKEN_SYMBOL: (
TOKEN_ALPHA: ints
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: args
TOKEN_SYMBOL: (
TOKEN_ALPHA: floats
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: float
TOKEN_SYMBOL: _
TOKEN_ALPHA: args
TOKEN_SYMBOL: (
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: floats
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: _
TOKEN_ALPHA: int
TOKEN_SYMBOL: _
TOKEN_ALPHA: args
TOKEN_SYMBOL: (
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: ints
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: isptr
TOKEN_SYMBOL: )
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ftype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: hasva
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: u
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: floats
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: isptr
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: call
TOKEN_SYMBOL: *
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: call
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fname
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: booleanize
TOKEN_SYMBOL: _
TOKEN_ALPHA: retval
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: restsize
TOKEN_SYMBOL: >
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: add
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: restsize
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_ALPHA: restsize
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: padding
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: add
TOKEN_SYMBOL: $
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: restore
TOKEN_SYMBOL: _
TOKEN_ALPHA: arg
TOKEN_SYMBOL: _
TOKEN_ALPHA: regs
TOKEN_SYMBOL: (
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: ints
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: floats
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: opos
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: decl
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declinit
TOKEN_SYMBOL: )
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: decl
TOKEN_SYMBOL: _
TOKEN_ALPHA: init
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declinit
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declvar
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: loff
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declvar
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: conv
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: _
TOKEN_ALPHA: convert
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: deref
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lload
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: _
TOKEN_ALPHA: convert
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: ternary
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: cond
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: ne
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: je
TOKEN_SYMBOL: (
TOKEN_ALPHA: ne
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: then
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: then
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: els
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: end
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: jmp
TOKEN_SYMBOL: (
TOKEN_ALPHA: end
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: ne
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: els
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: end
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: ne
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: goto
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: newlabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: jmp
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: newlabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: return
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: retval
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: retval
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: booleanize
TOKEN_SYMBOL: _
TOKEN_ALPHA: retval
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: retval
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: ret
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: compound
TOKEN_SYMBOL: _
TOKEN_ALPHA: stmt
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: stmts
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: stmts
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: logand
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: end
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: test
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: je
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: end
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: test
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: je
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: end
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: end
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: logor
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: end
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: test
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: jne
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: end
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: test
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: jne
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: end
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: end
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lognot
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: cmp
TOKEN_SYMBOL: $
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: sete
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movzb
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitand
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: and
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitor
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: pop
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: or
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitnot
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: not
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: cast
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: _
TOKEN_ALPHA: convert
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: comma
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: assign
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: STRUCT
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: >
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: copy
TOKEN_SYMBOL: _
TOKEN_ALPHA: struct
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: _
TOKEN_ALPHA: convert
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: right
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: store
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: left
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: newlabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: computed
TOKEN_SYMBOL: _
TOKEN_ALPHA: goto
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: jmp
TOKEN_SYMBOL: *
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: print
TOKEN_SYMBOL: _
TOKEN_ALPHA: source
TOKEN_SYMBOL: _
TOKEN_ALPHA: loc
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LITERAL
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: literal
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LVAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lvar
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: GVAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: gvar
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: FUNCDESG
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: FUNCALL
TOKEN_SYMBOL: :
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: maybe
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: builtin
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: /
TOKEN_SYMBOL: /
TOKEN_ALPHA: fall
TOKEN_ALPHA: through
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: FUNCPTR
TOKEN_SYMBOL: _
TOKEN_ALPHA: CALL
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: func
TOKEN_SYMBOL: _
TOKEN_ALPHA: call
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: DECL
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: decl
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: CONV
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: conv
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: ADDR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: DEREF
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: deref
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: IF
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: TERNARY
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: ternary
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: GOTO
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: goto
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LABEL
TOKEN_SYMBOL: :
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: newlabel
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: newlabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: RETURN
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: return
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: COMPOUND
TOKEN_SYMBOL: _
TOKEN_ALPHA: STMT
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: compound
TOKEN_SYMBOL: _
TOKEN_ALPHA: stmt
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: STRUCT
TOKEN_SYMBOL: _
TOKEN_ALPHA: REF
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: load
TOKEN_SYMBOL: _
TOKEN_ALPHA: struct
TOKEN_SYMBOL: _
TOKEN_ALPHA: ref
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: struc
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: PRE
TOKEN_SYMBOL: _
TOKEN_ALPHA: INC
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: pre
TOKEN_SYMBOL: _
TOKEN_ALPHA: inc
TOKEN_SYMBOL: _
TOKEN_ALPHA: dec
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: add
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: PRE
TOKEN_SYMBOL: _
TOKEN_ALPHA: DEC
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: pre
TOKEN_SYMBOL: _
TOKEN_ALPHA: inc
TOKEN_SYMBOL: _
TOKEN_ALPHA: dec
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: sub
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: POST
TOKEN_SYMBOL: _
TOKEN_ALPHA: INC
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: post
TOKEN_SYMBOL: _
TOKEN_ALPHA: inc
TOKEN_SYMBOL: _
TOKEN_ALPHA: dec
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: add
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: POST
TOKEN_SYMBOL: _
TOKEN_ALPHA: DEC
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: post
TOKEN_SYMBOL: _
TOKEN_ALPHA: inc
TOKEN_SYMBOL: _
TOKEN_ALPHA: dec
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: "
TOKEN_ALPHA: sub
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: !
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: lognot
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: &
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitand
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: |
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitor
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: ~
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bitnot
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: LOGAND
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: logand
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: LOGOR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: logor
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: CAST
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: cast
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: comma
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_SYMBOL: '
TOKEN_SYMBOL: =
TOKEN_SYMBOL: '
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: assign
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: LABEL
TOKEN_SYMBOL: _
TOKEN_ALPHA: ADDR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: COMPUTED
TOKEN_SYMBOL: _
TOKEN_ALPHA: GOTO
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: computed
TOKEN_SYMBOL: _
TOKEN_ALPHA: goto
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: binop
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: zero
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_SYMBOL: ;
TOKEN_ALPHA: size
TOKEN_SYMBOL: >
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_ALPHA: size
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: quad
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_SYMBOL: ;
TOKEN_ALPHA: size
TOKEN_SYMBOL: >
TOKEN_SYMBOL: =
TOKEN_DIGIT: 4
TOKEN_SYMBOL: ;
TOKEN_ALPHA: size
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_DIGIT: 4
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: long
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_SYMBOL: ;
TOKEN_ALPHA: size
TOKEN_SYMBOL: >
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: size
TOKEN_SYMBOL: -
TOKEN_SYMBOL: -
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: byte
TOKEN_DIGIT: 0
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: padding
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: diff
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initoff
TOKEN_SYMBOL: -
TOKEN_ALPHA: off
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: diff
TOKEN_SYMBOL: >
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: zero
TOKEN_SYMBOL: (
TOKEN_ALPHA: diff
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: operand
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LVAR
TOKEN_SYMBOL: :
TOKEN_SYMBOL: {
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: label
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: data
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: +
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: label
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: do
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: (
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: lvarinit
TOKEN_SYMBOL: ,
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: +
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: data
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: quad
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: label
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: case
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: GVAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: quad
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: internal
TOKEN_ALPHA: error
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: _
TOKEN_ALPHA: charptr
TOKEN_SYMBOL: (
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: s
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: char
TOKEN_SYMBOL: *
TOKEN_ALPHA: label
TOKEN_SYMBOL: =
TOKEN_ALPHA: make
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: data
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: +
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: label
TOKEN_SYMBOL: (
TOKEN_ALPHA: label
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: string
TOKEN_SYMBOL: \
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: \
TOKEN_SYMBOL: "
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: quote
TOKEN_SYMBOL: _
TOKEN_ALPHA: cstring
TOKEN_SYMBOL: (
TOKEN_ALPHA: s
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: data
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: quad
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: label
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: _
TOKEN_ALPHA: primtype
TOKEN_SYMBOL: (
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ,
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: val
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: switch
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: FLOAT
TOKEN_SYMBOL: :
TOKEN_SYMBOL: {
TOKEN_ALPHA: float
TOKEN_ALPHA: f
TOKEN_SYMBOL: =
TOKEN_ALPHA: val
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fval
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: long
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: *
TOKEN_SYMBOL: (
TOKEN_ALPHA: uint
TOKEN_DIGIT: 3
TOKEN_DIGIT: 2
TOKEN_SYMBOL: _
TOKEN_ALPHA: t
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_ALPHA: f
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: DOUBLE
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: quad
TOKEN_SYMBOL: %
TOKEN_ALPHA: ld
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: *
TOKEN_SYMBOL: (
TOKEN_ALPHA: uint
TOKEN_DIGIT: 6
TOKEN_DIGIT: 4
TOKEN_SYMBOL: _
TOKEN_ALPHA: t
TOKEN_SYMBOL: *
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_ALPHA: val
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fval
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: BOOL
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: byte
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: !
TOKEN_SYMBOL: !
TOKEN_ALPHA: eval
TOKEN_SYMBOL: _
TOKEN_ALPHA: intexpr
TOKEN_SYMBOL: (
TOKEN_ALPHA: val
TOKEN_SYMBOL: ,
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: CHAR
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: byte
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: eval
TOKEN_SYMBOL: _
TOKEN_ALPHA: intexpr
TOKEN_SYMBOL: (
TOKEN_ALPHA: val
TOKEN_SYMBOL: ,
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: SHORT
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: short
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: eval
TOKEN_SYMBOL: _
TOKEN_ALPHA: intexpr
TOKEN_SYMBOL: (
TOKEN_ALPHA: val
TOKEN_SYMBOL: ,
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: INT
TOKEN_SYMBOL: :
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: long
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: eval
TOKEN_SYMBOL: _
TOKEN_ALPHA: intexpr
TOKEN_SYMBOL: (
TOKEN_ALPHA: val
TOKEN_SYMBOL: ,
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LONG
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: LLONG
TOKEN_SYMBOL: :
TOKEN_ALPHA: case
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: PTR
TOKEN_SYMBOL: :
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: val
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: OP
TOKEN_SYMBOL: _
TOKEN_ALPHA: LABEL
TOKEN_SYMBOL: _
TOKEN_ALPHA: ADDR
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: quad
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: val
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: newlabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: bool
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: char
TOKEN_SYMBOL: _
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: =
TOKEN_SYMBOL: (
TOKEN_ALPHA: val
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: ARRAY
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_ALPHA: val
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: CHAR
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: char
TOKEN_SYMBOL: _
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: _
TOKEN_ALPHA: charptr
TOKEN_SYMBOL: (
TOKEN_ALPHA: val
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: sval
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: val
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: GVAR
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: quad
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: val
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: base
TOKEN_SYMBOL: =
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: v
TOKEN_SYMBOL: =
TOKEN_ALPHA: eval
TOKEN_SYMBOL: _
TOKEN_ALPHA: intexpr
TOKEN_SYMBOL: (
TOKEN_ALPHA: val
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: &
TOKEN_ALPHA: base
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: base
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: quad
TOKEN_SYMBOL: %
TOKEN_ALPHA: u
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: =
TOKEN_ALPHA: base
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: base
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: CONV
TOKEN_SYMBOL: |
TOKEN_SYMBOL: |
TOKEN_ALPHA: base
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: ADDR
TOKEN_SYMBOL: )
TOKEN_ALPHA: base
TOKEN_SYMBOL: =
TOKEN_ALPHA: base
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: base
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: !
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: GVAR
TOKEN_SYMBOL: )
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: global
TOKEN_ALPHA: variable
TOKEN_ALPHA: expected
TOKEN_SYMBOL: ,
TOKEN_ALPHA: but
TOKEN_ALPHA: got
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_DIGIT: 2
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_ALPHA: base
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: quad
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: +
TOKEN_SYMBOL: %
TOKEN_ALPHA: u
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: base
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: *
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ptr
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_ALPHA: default
TOKEN_SYMBOL: :
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: don
TOKEN_SYMBOL: '
TOKEN_ALPHA: t
TOKEN_ALPHA: know
TOKEN_ALPHA: how
TOKEN_ALPHA: to
TOKEN_ALPHA: handle
TOKEN_SYMBOL: \
TOKEN_ALPHA: n
TOKEN_SYMBOL: <
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: >
TOKEN_SYMBOL: \
TOKEN_ALPHA: n
TOKEN_SYMBOL: <
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: >
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: ty
TOKEN_DIGIT: 2
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_DIGIT: 2
TOKEN_ALPHA: s
TOKEN_SYMBOL: (
TOKEN_ALPHA: val
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: do
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: (
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: inits
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: size
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: inits
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_DIGIT: 0
TOKEN_SYMBOL: <
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: node
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: inits
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: v
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initval
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: padding
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitsize
TOKEN_SYMBOL: >
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitoff
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: long
TOKEN_ALPHA: data
TOKEN_SYMBOL: =
TOKEN_ALPHA: eval
TOKEN_SYMBOL: _
TOKEN_ALPHA: intexpr
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: ,
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: Type
TOKEN_SYMBOL: *
TOKEN_ALPHA: totype
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: inits
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: node
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: inits
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitsize
TOKEN_SYMBOL: <
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: v
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initval
TOKEN_SYMBOL: ;
TOKEN_ALPHA: totype
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: ;
TOKEN_ALPHA: data
TOKEN_SYMBOL: |
TOKEN_SYMBOL: =
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_SYMBOL: (
TOKEN_ALPHA: long
TOKEN_SYMBOL: )
TOKEN_DIGIT: 1
TOKEN_SYMBOL: <
TOKEN_SYMBOL: <
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitsize
TOKEN_SYMBOL: )
TOKEN_SYMBOL: -
TOKEN_DIGIT: 1
TOKEN_SYMBOL: )
TOKEN_SYMBOL: &
TOKEN_ALPHA: eval
TOKEN_SYMBOL: _
TOKEN_ALPHA: intexpr
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: ,
TOKEN_ALPHA: NULL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: <
TOKEN_SYMBOL: <
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: bitoff
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: _
TOKEN_ALPHA: primtype
TOKEN_SYMBOL: (
TOKEN_ALPHA: totype
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: &
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LITERAL
TOKEN_SYMBOL: ,
TOKEN_ALPHA: totype
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: .
TOKEN_ALPHA: ival
TOKEN_SYMBOL: =
TOKEN_ALPHA: data
TOKEN_SYMBOL: }
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: off
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: size
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: inits
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_ALPHA: break
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: off
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: size
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: ADDR
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: _
TOKEN_ALPHA: addr
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: operand
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: continue
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: LVAR
TOKEN_SYMBOL: &
TOKEN_SYMBOL: &
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: lvarinit
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: do
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: lvarinit
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: continue
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: _
TOKEN_ALPHA: primtype
TOKEN_SYMBOL: (
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: totype
TOKEN_SYMBOL: ,
TOKEN_ALPHA: node
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: initval
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: zero
TOKEN_SYMBOL: (
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: v
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: data
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declvar
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: isstatic
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: noindent
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: global
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declvar
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: noindent
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declvar
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: do
TOKEN_SYMBOL: _
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declinit
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declvar
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: ,
TOKEN_ALPHA: depth
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bss
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: data
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declvar
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: isstatic
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: global
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declvar
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: lcomm
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declvar
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: glabel
TOKEN_SYMBOL: ,
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declvar
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: global
TOKEN_SYMBOL: _
TOKEN_ALPHA: var
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: declinit
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: data
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: else
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: bss
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: int
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: regsave
TOKEN_SYMBOL: _
TOKEN_ALPHA: area
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: sub
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: REGAREA
TOKEN_SYMBOL: _
TOKEN_ALPHA: SIZE
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rdi
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsi
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 8
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rdx
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 1
TOKEN_DIGIT: 6
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rcx
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 2
TOKEN_DIGIT: 4
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 3
TOKEN_DIGIT: 2
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: r
TOKEN_DIGIT: 9
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 4
TOKEN_DIGIT: 0
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movaps
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 4
TOKEN_DIGIT: 8
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movaps
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 1
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 6
TOKEN_DIGIT: 4
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movaps
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 2
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 8
TOKEN_DIGIT: 0
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movaps
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 3
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 9
TOKEN_DIGIT: 6
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movaps
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 4
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 1
TOKEN_DIGIT: 1
TOKEN_DIGIT: 2
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movaps
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 5
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 1
TOKEN_DIGIT: 2
TOKEN_DIGIT: 8
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movaps
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 6
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 1
TOKEN_DIGIT: 4
TOKEN_DIGIT: 4
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movaps
TOKEN_SYMBOL: #
TOKEN_ALPHA: xmm
TOKEN_DIGIT: 7
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 1
TOKEN_DIGIT: 6
TOKEN_DIGIT: 0
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: return
TOKEN_ALPHA: REGAREA
TOKEN_SYMBOL: _
TOKEN_ALPHA: SIZE
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: func
TOKEN_SYMBOL: _
TOKEN_ALPHA: params
TOKEN_SYMBOL: (
TOKEN_ALPHA: Vector
TOKEN_SYMBOL: *
TOKEN_ALPHA: params
TOKEN_SYMBOL: ,
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: int
TOKEN_ALPHA: ireg
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: xreg
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: arg
TOKEN_SYMBOL: =
TOKEN_DIGIT: 2
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: params
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: v
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: params
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: STRUCT
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: lea
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: arg
TOKEN_SYMBOL: *
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: size
TOKEN_SYMBOL: =
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: struct
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: off
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: arg
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_ALPHA: size
TOKEN_SYMBOL: /
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: is
TOKEN_SYMBOL: _
TOKEN_ALPHA: flotype
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: )
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: xreg
TOKEN_SYMBOL: >
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: arg
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: *
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: xmm
TOKEN_SYMBOL: (
TOKEN_ALPHA: xreg
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: off
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: ireg
TOKEN_SYMBOL: >
TOKEN_SYMBOL: =
TOKEN_DIGIT: 6
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: BOOL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: arg
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: *
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movzb
TOKEN_SYMBOL: #
TOKEN_ALPHA: al
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: eax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: (
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: arg
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: *
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rax
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: KIND
TOKEN_SYMBOL: _
TOKEN_ALPHA: BOOL
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: movzb
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: SREGS
TOKEN_SYMBOL: [
TOKEN_ALPHA: ireg
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: ,
TOKEN_ALPHA: MREGS
TOKEN_SYMBOL: [
TOKEN_ALPHA: ireg
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_ALPHA: REGS
TOKEN_SYMBOL: [
TOKEN_ALPHA: ireg
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: ]
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: off
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: loff
TOKEN_SYMBOL: =
TOKEN_ALPHA: off
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: static
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: func
TOKEN_SYMBOL: _
TOKEN_ALPHA: prologue
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: func
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: SAVE
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: text
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_SYMBOL: !
TOKEN_ALPHA: func
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: isstatic
TOKEN_SYMBOL: )
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: noindent
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: .
TOKEN_ALPHA: global
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: func
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fname
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: noindent
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_SYMBOL: %
TOKEN_ALPHA: s
TOKEN_SYMBOL: :
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: func
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: fname
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: nop
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: push
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: mov
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rbp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: off
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: func
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: hasva
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: set
TOKEN_SYMBOL: _
TOKEN_ALPHA: reg
TOKEN_SYMBOL: _
TOKEN_ALPHA: nums
TOKEN_SYMBOL: (
TOKEN_ALPHA: func
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: params
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: off
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: regsave
TOKEN_SYMBOL: _
TOKEN_ALPHA: area
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: push
TOKEN_SYMBOL: _
TOKEN_ALPHA: func
TOKEN_SYMBOL: _
TOKEN_ALPHA: params
TOKEN_SYMBOL: (
TOKEN_ALPHA: func
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: params
TOKEN_SYMBOL: ,
TOKEN_ALPHA: off
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: off
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: func
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: params
TOKEN_SYMBOL: )
TOKEN_SYMBOL: *
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: localarea
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: for
TOKEN_SYMBOL: (
TOKEN_ALPHA: int
TOKEN_ALPHA: i
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: <
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: len
TOKEN_SYMBOL: (
TOKEN_ALPHA: func
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: localvars
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: i
TOKEN_SYMBOL: +
TOKEN_SYMBOL: +
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: v
TOKEN_SYMBOL: =
TOKEN_ALPHA: vec
TOKEN_SYMBOL: _
TOKEN_ALPHA: get
TOKEN_SYMBOL: (
TOKEN_ALPHA: func
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: localvars
TOKEN_SYMBOL: ,
TOKEN_ALPHA: i
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: int
TOKEN_ALPHA: size
TOKEN_SYMBOL: =
TOKEN_ALPHA: align
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: ty
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: size
TOKEN_SYMBOL: ,
TOKEN_DIGIT: 8
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: assert
TOKEN_SYMBOL: (
TOKEN_ALPHA: size
TOKEN_SYMBOL: %
TOKEN_DIGIT: 8
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_DIGIT: 0
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: off
TOKEN_SYMBOL: -
TOKEN_SYMBOL: =
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: loff
TOKEN_SYMBOL: =
TOKEN_ALPHA: off
TOKEN_SYMBOL: ;
TOKEN_ALPHA: localarea
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_ALPHA: size
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: localarea
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: sub
TOKEN_SYMBOL: $
TOKEN_SYMBOL: %
TOKEN_ALPHA: d
TOKEN_SYMBOL: ,
TOKEN_SYMBOL: #
TOKEN_ALPHA: rsp
TOKEN_SYMBOL: "
TOKEN_SYMBOL: ,
TOKEN_ALPHA: localarea
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: +
TOKEN_SYMBOL: =
TOKEN_ALPHA: localarea
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
TOKEN_ALPHA: void
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: toplevel
TOKEN_SYMBOL: (
TOKEN_ALPHA: Node
TOKEN_SYMBOL: *
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: stackpos
TOKEN_SYMBOL: =
TOKEN_DIGIT: 8
TOKEN_SYMBOL: ;
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: FUNC
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: func
TOKEN_SYMBOL: _
TOKEN_ALPHA: prologue
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: expr
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: body
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: ret
TOKEN_SYMBOL: (
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_ALPHA: if
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: -
TOKEN_SYMBOL: >
TOKEN_ALPHA: kind
TOKEN_SYMBOL: =
TOKEN_SYMBOL: =
TOKEN_ALPHA: AST
TOKEN_SYMBOL: _
TOKEN_ALPHA: DECL
TOKEN_SYMBOL: )
TOKEN_SYMBOL: {
TOKEN_ALPHA: emit
TOKEN_SYMBOL: _
TOKEN_ALPHA: global
TOKEN_SYMBOL: _
TOKEN_ALPHA: var
TOKEN_SYMBOL: (
TOKEN_ALPHA: v
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_ALPHA: else
TOKEN_SYMBOL: {
TOKEN_ALPHA: error
TOKEN_SYMBOL: (
TOKEN_SYMBOL: "
TOKEN_ALPHA: internal
TOKEN_ALPHA: error
TOKEN_SYMBOL: "
TOKEN_SYMBOL: )
TOKEN_SYMBOL: ;
TOKEN_SYMBOL: }
TOKEN_SYMBOL: }
